#!/usr/bin/env python3
"""Downloads and meshes HUC and hydrography data.

Default data for HUCs comes from The National Map's Watershed Boundary Dataset (WBD).
Default data for hydrography comes from The National Map's National Hydrography Dataset (NHD).
See: "https://nhd.usgs.gov/"

Default DEMs come from the National Elevation Dataset (NED).
See: "https://lta.cr.usgs.gov/NED"
"""

import matplotlib
#matplotlib.use("PDF")

import os,sys
import numpy as np
from matplotlib import pyplot as plt
import shapely

import workflow.hilev
import workflow.ui
import workflow.files


def get_args():
    # set up parser
    parser = workflow.ui.get_basic_argparse(__doc__)
    workflow.ui.outmesh_options(parser)
    workflow.ui.simplify_options(parser)
    workflow.ui.refine_options(parser)
    workflow.ui.center_options(parser)
    workflow.ui.huc_source_options(parser)
    workflow.ui.dem_source_options(parser)
    workflow.ui.huc_arg(parser)

    # parse args, log
    return parser.parse_args()

def mesh_hucs(args):
    workflow.ui.setup_logging(args.verbosity, args.logfile)
    sources = workflow.files.get_sources(args)
    
    # collect data
    hucs, centroid = workflow.hilev.get_hucs(args.HUC, sources['HUC'], center=args.center)
    #workflow.plot.hucs(hucs, style='-x')

    rivers = workflow.hilev.get_rivers(args.HUC, sources['HUC'])
    #workflow.plot.rivers(rivers, style='-x', color='k')

    dem_profile, dem = workflow.hilev.get_dem(args.HUC, sources)

    # make 2D mesh
    if args.center:
        rivers = [shapely.affinity.translate(r, -centroid.coords[0][0], -centroid.coords[0][1]) for r in rivers]
    rivers = workflow.hilev.simplify_and_prune(hucs, rivers, args)
    mesh_points2, mesh_tris = workflow.hilev.triangulate(hucs, rivers, args)

    # elevate to 3D
    if args.center:
        mesh_points2_uncentered = mesh_points2 + np.expand_dims(np.array(centroid.coords[0]),0)
    else:
        mesh_points2_uncentered = mesh_points2

    mesh_points3_uncentered = workflow.hilev.elevate(mesh_points2_uncentered, dem, dem_profile)

    if args.center:
        mesh_points3 = np.empty(mesh_points3_uncentered.shape,'d')
        mesh_points3[:,0:2] = mesh_points2
        mesh_points3[:,2] = mesh_points3_uncentered[:,2]
    else:
        mesh_points3 = mesh_points3_uncentered

    return centroid, hucs, rivers, (mesh_points3, mesh_tris)

def plot(args, hucs, rivers, triangulation):
    mesh_points3, mesh_tris = triangulation
    if args.verbosity > 0:    
        fig = plt.figure(figsize=(4,5))
        ax = fig.add_subplot(111)
        mp = workflow.plot.triangulation(mesh_points3, mesh_tris, linewidth=0)
        fig.colorbar(mp, orientation="horizontal", pad=0.1)
        workflow.plot.hucs(hucs, 'k', linewidth=0.7)
        workflow.plot.rivers(rivers, color='white', linewidth=0.5)
        ax.set_aspect('equal', 'datalim')
        ax.set_xlabel('')
        ax.set_xticklabels([round(0.001*tick) for tick in ax.get_xticks()])
        plt.ylabel('')
        ax.set_yticklabels([round(0.001*tick) for tick in ax.get_yticks()])
        plt.savefig('my_mesh')

def save(args, centroid, triangulation):
    mesh_points3, mesh_tris = triangulation
    metadata_lines = ['Mesh of HUC: %s including all HUC 12 boundaries and hydrography.'%args.HUC,
                      '',
                      '  coordinate system = epsg:%04i'%(workflow.conf.rcParams['epsg']),
                      ]

    if args.center:
        metadata_lines.append('  centered to: %g, %g'%centroid.coords[0])
    metadata_lines.extend(['',
                           'Mesh generated by workflow mesh_hucs.py script.',
                           '',
                           workflow.utils.get_git_revision_hash(),
                           '',
                           'with calling sequence:',
                           '  '+' '.join(sys.argv)])

    if args.outfile is None:
        outdir = "data/meshes"
        if not os.path.isdir(outdir):
            os.makedirs(outdir)
        outfile = os.path.join(outdir, 'huc_%s.vtk'%args.HUC)
    else:
        outfile = args.outfile            
    workflow.hilev.save(outfile, mesh_points3, mesh_tris, '\n'.join(metadata_lines))
        

if __name__ == '__main__':
    args = get_args()
    print(args.__dict__)
    centroid, hucs, rivers, triangulation = mesh_hucs(args)
    plot(args, hucs, rivers, triangulation)
    save(args, centroid, triangulation)
    plt.show()
    sys.exit(0)
