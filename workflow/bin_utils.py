"""Collection of common functionality across multiple scripts in bin."""
import os,sys
from matplotlib import pyplot as plt

import workflow.plot
import workflow.conf
import workflow.utils


def plot_with_triangulation(args, hucs, rivers, triangulation):
    mesh_points3, mesh_tris = triangulation
    if args.verbosity > 0:    
        fig = plt.figure(figsize=(4,5))
        ax = fig.add_subplot(111)
        mp = workflow.plot.triangulation(mesh_points3, mesh_tris, linewidth=0, color='elevation')
        #fig.colorbar(mp, orientation="horizontal", pad=0.1)
        workflow.plot.hucs(hucs, 'k', linewidth=0.7)
        workflow.plot.rivers(rivers, color='blue', linewidth=0.5)
        ax.set_aspect('equal', 'datalim')
        plt.savefig('my_mesh')

def plot_with_dem(ax, centroid, hucs, rivers, dem, shape_color='k', river_color='white',
                  cb=True, vmin=None, vmax=None):
    mappable = workflow.plot.dem(dem_profile, dem, vmin=vmin, vmax=vmax)
    if cb:
        fig.colorbar(mappable, orientation="horizontal", pad=0.1)
    workflow.plot.hucs(hucs, shape_color, linewidth=0.7)
    workflow.plot.rivers(rivers, color=river_color, linewidth=0.5)
    ax.set_aspect('equal', 'datalim')

        
def save(args, centroid, triangulation):
    mesh_points3, mesh_tris = triangulation
    if hasattr(args, 'HUC'):
        metadata_lines = ['Mesh of HUC: %s'%args.HUC,
                          '',
                          '  coordinate system = epsg:%04i'%(workflow.conf.rcParams['epsg']),
                         ]
    else:
        metadata_lines = ['Mesh of shape: %s'%args.input_file,
                          '',
                          '  coordinate system = epsg:%04i'%(workflow.conf.rcParams['epsg']),
                         ]

    if args.center:
        metadata_lines.append('  centered to: %g, %g'%centroid.coords[0])
    metadata_lines.extend(['',
                           'Mesh generated by workflow mesh_hucs.py script.',
                           '',
                           workflow.utils.get_git_revision_hash(),
                           '',
                           'with calling sequence:',
                           '  '+' '.join(sys.argv)])

    workflow.save(args.output_file, mesh_points3, mesh_tris, '\n'.join(metadata_lines))
        

